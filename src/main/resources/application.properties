server.port=8765
#It will get the config from: http://localhost:8888/api-gateway/default
#The profile selected is: default
spring.application.name=api-gateway
spring.config.import=optional:configserver:http://localhost:8888

#Eureka
eureka.client.service-url.default-zone=http://localhost:8761/eureka

# Now whenever you have a client for the currency exchange,
# you can actually give them this http://localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/EUR/to/CAD URL or for
# example: http://localhost:8765/CURRENCY-CONVERSION/currency-conversion-feign/from/USD/to/CAD/quantity/100
# and you can implement all the common features in your API gateway and the API Gateway would
# take care of the common features and then invoke the currency exchange.



# You can call any microservice which is registered with Eureka through the API Gateway.
# If you want to implement things like authentication, you can implement them on API Gateway and you
# can only allow those things which are authenticated in your microservices.
# So, all the authentication logic can be implemented on the API gateway

#this property and the one down bellow, have been commented out because we will use the redirection logic in ApiGatewayConfiguration.
# but we will keep the 2 properties for leaning purposes.

#spring.cloud.gateway.discovery.locator.enabled=true

# instead of http://localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/EUR/to/CAD
# http://localhost:8765/CURRENCY-CONVERSION/currency-conversion-feign/from/USD/to/CAD/quantity/100
# you can know use: http://localhost:8765/currency-exchange/currency-exchange/from/EUR/to/CAD
# http://localhost:8765/currency-conversion/currency-conversion-feign/from/USD/to/CAD/quantity/100
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true


# We learned how we can proxy through the API gateway to other microservices using Eureka & using
# the Cloud Gateway Discovery Locator feature.